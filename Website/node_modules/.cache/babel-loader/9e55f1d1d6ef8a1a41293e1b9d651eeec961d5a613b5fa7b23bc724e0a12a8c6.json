{"ast":null,"code":"var _jsxFileName = \"/Users/rr/Desktop/ROK-1418/K1418/Website/src/PercentageDonutChart .tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend, DoughnutController // Import DoughnutController\n} from 'chart.js';\n\n// Register the components you're going to use\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(DoughnutController,\n// Register DoughnutController for doughnut charts\nArcElement, Tooltip, Legend);\n\n// Define an interface for the component props\n\nconst PercentageDonutChart = _ref => {\n  _s();\n  let {\n    percentage\n  } = _ref;\n  const chartRef = useRef(null);\n  let rotPercent = percentage;\n  if (rotPercent > 100) {\n    rotPercent = 100;\n  }\n  useEffect(() => {\n    if (chartRef.current) {\n      const canvas = chartRef.current;\n      const ctx = canvas === null || canvas === void 0 ? void 0 : canvas.getContext('2d');\n      if (!ctx) {\n        return; // Exit if the context is not available\n      }\n\n      const donutChart = new ChartJS(ctx, {\n        type: 'doughnut',\n        // Specify the chart type\n        data: {\n          labels: ['Completed', 'Remaining'],\n          datasets: [{\n            data: [percentage, 100 - rotPercent],\n            backgroundColor: ['#fe5f55',\n            // Color for the \"Completed\" section\n            '#27272b' // Color for the \"Remaining\" section\n            ],\n\n            borderColor: ['#fe5f55', '#27272b'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          circumference: 180,\n          // Makes it a semicircle, remove this line for a full donut\n          rotation: -90,\n          // Adjust the starting angle\n          cutout: '80%',\n          // Adjust the donut thickness\n          plugins: {\n            legend: {\n              display: false // Set to true if you want to display the legend\n            },\n\n            tooltip: {\n              callbacks: {\n                label: function (context) {\n                  let label = context.label || '';\n                  if (label) {\n                    label += ': ';\n                  }\n                  if (context.parsed !== undefined) {\n                    label += new Intl.NumberFormat('en-US', {\n                      style: 'percent'\n                    }).format(context.parsed / 100);\n                  }\n                  return label;\n                }\n              }\n            }\n          }\n        }\n      });\n      return () => {\n        donutChart.destroy();\n      };\n    }\n  }, [percentage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    style: {\n      position: 'relative',\n      maxWidth: '200px',\n      maxHeight: '200px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"percentage-text\",\n      style: {\n        position: 'absolute',\n        top: '60%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        fontSize: '20px',\n        color: 'white'\n      },\n      children: [Math.round(percentage), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s(PercentageDonutChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = PercentageDonutChart;\nexport default PercentageDonutChart;\nvar _c;\n$RefreshReg$(_c, \"PercentageDonutChart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","ChartJS","ArcElement","Tooltip","Legend","DoughnutController","jsxDEV","_jsxDEV","register","PercentageDonutChart","_ref","_s","percentage","chartRef","rotPercent","current","canvas","ctx","getContext","donutChart","type","data","labels","datasets","backgroundColor","borderColor","borderWidth","options","circumference","rotation","cutout","plugins","legend","display","tooltip","callbacks","label","context","parsed","undefined","Intl","NumberFormat","style","format","destroy","className","position","maxWidth","maxHeight","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","top","left","transform","fontSize","color","Math","round","_c","$RefreshReg$"],"sources":["/Users/rr/Desktop/ROK-1418/K1418/Website/src/PercentageDonutChart .tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport {\n    Chart as ChartJS,\n    ArcElement,\n    Tooltip,\n    Legend,\n    DoughnutController // Import DoughnutController\n} from 'chart.js';\n\n// Register the components you're going to use\nChartJS.register(\n    DoughnutController, // Register DoughnutController for doughnut charts\n    ArcElement,\n    Tooltip,\n    Legend\n);\n\n// Define an interface for the component props\ninterface PercentageDonutChartProps {\n    percentage: number;\n}\n\n\nconst PercentageDonutChart: React.FC<PercentageDonutChartProps> = ({ percentage }) => {\n    const chartRef = useRef<HTMLCanvasElement>(null);\n    let rotPercent = percentage;\n    if(rotPercent > 100) {\n        rotPercent = 100;\n    }\n    useEffect(() => {\n        if (chartRef.current) {\n            const canvas = chartRef.current;\n            const ctx = canvas?.getContext('2d');\n            if (!ctx) {\n                return; // Exit if the context is not available\n            }\n            const donutChart = new ChartJS(ctx, {\n                type: 'doughnut', // Specify the chart type\n                data: {\n                    labels: ['Completed', 'Remaining'],\n                    datasets: [{\n                        data: [percentage, 100 - rotPercent],\n                        backgroundColor: [\n                            '#fe5f55', // Color for the \"Completed\" section\n                            '#27272b'  // Color for the \"Remaining\" section\n                        ],\n                        borderColor: [\n                            '#fe5f55',\n                            '#27272b'\n                        ],\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    circumference: 180, // Makes it a semicircle, remove this line for a full donut\n                    rotation: -90,      // Adjust the starting angle\n                    cutout: '80%',      // Adjust the donut thickness\n                    plugins: {\n                        legend: {\n                            display: false // Set to true if you want to display the legend\n                        },\n                        tooltip: {\n                            callbacks: {\n                                label: function (context) {\n                                    let label = context.label || '';\n\n                                    if (label) {\n                                        label += ': ';\n                                    }\n                                    if (context.parsed !== undefined) {\n                                        label += new Intl.NumberFormat('en-US', { style: 'percent' }).format(context.parsed / 100);\n                                    }\n                                    return label;\n                                }\n                            }\n                        }\n                    },\n                }\n            });\n\n            return () => {\n                donutChart.destroy();\n            };\n        }\n    }, [percentage]);\n\n    return (\n        <div className=\"chart-container\" style={{ position: 'relative', maxWidth: '200px', maxHeight: '200px' }}>\n            <canvas ref={chartRef}></canvas>\n            <div className=\"percentage-text\" style={{ position: 'absolute', top: '60%', left: '50%', transform: 'translate(-50%, -50%)', fontSize: '20px', color: 'white' }}>\n                {Math.round(percentage)}%\n            </div>\n        </div>\n    );\n};\n\nexport default PercentageDonutChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SACIC,KAAK,IAAIC,OAAO,EAChBC,UAAU,EACVC,OAAO,EACPC,MAAM,EACNC,kBAAkB,CAAC;AAAA,OAChB,UAAU;;AAEjB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAN,OAAO,CAACO,QAAQ,CACZH,kBAAkB;AAAE;AACpBH,UAAU,EACVC,OAAO,EACPC,MACJ,CAAC;;AAED;;AAMA,MAAMK,oBAAyD,GAAGC,IAAA,IAAoB;EAAAC,EAAA;EAAA,IAAnB;IAAEC;EAAW,CAAC,GAAAF,IAAA;EAC7E,MAAMG,QAAQ,GAAGd,MAAM,CAAoB,IAAI,CAAC;EAChD,IAAIe,UAAU,GAAGF,UAAU;EAC3B,IAAGE,UAAU,GAAG,GAAG,EAAE;IACjBA,UAAU,GAAG,GAAG;EACpB;EACAhB,SAAS,CAAC,MAAM;IACZ,IAAIe,QAAQ,CAACE,OAAO,EAAE;MAClB,MAAMC,MAAM,GAAGH,QAAQ,CAACE,OAAO;MAC/B,MAAME,GAAG,GAAGD,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEE,UAAU,CAAC,IAAI,CAAC;MACpC,IAAI,CAACD,GAAG,EAAE;QACN,OAAO,CAAC;MACZ;;MACA,MAAME,UAAU,GAAG,IAAIlB,OAAO,CAACgB,GAAG,EAAE;QAChCG,IAAI,EAAE,UAAU;QAAE;QAClBC,IAAI,EAAE;UACFC,MAAM,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC;UAClCC,QAAQ,EAAE,CAAC;YACPF,IAAI,EAAE,CAACT,UAAU,EAAE,GAAG,GAAGE,UAAU,CAAC;YACpCU,eAAe,EAAE,CACb,SAAS;YAAE;YACX,SAAS,CAAE;YAAA,CACd;;YACDC,WAAW,EAAE,CACT,SAAS,EACT,SAAS,CACZ;YACDC,WAAW,EAAE;UACjB,CAAC;QACL,CAAC;QACDC,OAAO,EAAE;UACLC,aAAa,EAAE,GAAG;UAAE;UACpBC,QAAQ,EAAE,CAAC,EAAE;UAAO;UACpBC,MAAM,EAAE,KAAK;UAAO;UACpBC,OAAO,EAAE;YACLC,MAAM,EAAE;cACJC,OAAO,EAAE,KAAK,CAAC;YACnB,CAAC;;YACDC,OAAO,EAAE;cACLC,SAAS,EAAE;gBACPC,KAAK,EAAE,SAAAA,CAAUC,OAAO,EAAE;kBACtB,IAAID,KAAK,GAAGC,OAAO,CAACD,KAAK,IAAI,EAAE;kBAE/B,IAAIA,KAAK,EAAE;oBACPA,KAAK,IAAI,IAAI;kBACjB;kBACA,IAAIC,OAAO,CAACC,MAAM,KAAKC,SAAS,EAAE;oBAC9BH,KAAK,IAAI,IAAII,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;sBAAEC,KAAK,EAAE;oBAAU,CAAC,CAAC,CAACC,MAAM,CAACN,OAAO,CAACC,MAAM,GAAG,GAAG,CAAC;kBAC9F;kBACA,OAAOF,KAAK;gBAChB;cACJ;YACJ;UACJ;QACJ;MACJ,CAAC,CAAC;MAEF,OAAO,MAAM;QACTjB,UAAU,CAACyB,OAAO,CAAC,CAAC;MACxB,CAAC;IACL;EACJ,CAAC,EAAE,CAAChC,UAAU,CAAC,CAAC;EAEhB,oBACIL,OAAA;IAAKsC,SAAS,EAAC,iBAAiB;IAACH,KAAK,EAAE;MAAEI,QAAQ,EAAE,UAAU;MAAEC,QAAQ,EAAE,OAAO;MAAEC,SAAS,EAAE;IAAQ,CAAE;IAAAC,QAAA,gBACpG1C,OAAA;MAAQ2C,GAAG,EAAErC;IAAS;MAAAsC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eAChC/C,OAAA;MAAKsC,SAAS,EAAC,iBAAiB;MAACH,KAAK,EAAE;QAAEI,QAAQ,EAAE,UAAU;QAAES,GAAG,EAAE,KAAK;QAAEC,IAAI,EAAE,KAAK;QAAEC,SAAS,EAAE,uBAAuB;QAAEC,QAAQ,EAAE,MAAM;QAAEC,KAAK,EAAE;MAAQ,CAAE;MAAAV,QAAA,GAC3JW,IAAI,CAACC,KAAK,CAACjD,UAAU,CAAC,EAAC,GAC5B;IAAA;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC3C,EAAA,CAvEIF,oBAAyD;AAAAqD,EAAA,GAAzDrD,oBAAyD;AAyE/D,eAAeA,oBAAoB;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}